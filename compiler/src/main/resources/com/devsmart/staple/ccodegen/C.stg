
classTypeDecl(name, parent, functions) ::= <<
typedef struct _<name>Class <name>Class;
struct _<name>Class {
  <parent>
  <functions; separator="\n">
};


>>

classTypeInstance(name, parent, functions) ::= <<
<name>Class <name>ClassObj = {
  "<name>",
  <parent>ClassObj,
  <functions:{x | <name>_<x>}; separator=",\n">
};

>>

classObjDecl(name, parent, fields) ::= <<
typedef struct _<name> <name>;
struct _<name> {
  <parent>
  <fields; separator="\n">
};

#define CAST_<name>(x) ((<name>*)x)

>>

functionDec(return, name, args) ::= <<
<return> <name>(<args; separator=", ">)
>>

functionType(return, name, args) ::= <<
<return> (*<name>)(<args; separator=", ">)
>>

objInitFunc(name, parent, functions, members) ::= <<
void <name>_init(void* self)
{
  CAST_<parent>(self)->init(self);
  <name>* thiz = (<name>*)self;
  thiz->classType = &<name>ClassObj;
}

>>